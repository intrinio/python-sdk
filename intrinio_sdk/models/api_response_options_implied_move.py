# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.103.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from intrinio_sdk.models.option_implied_move_data import OptionImpliedMoveData  # noqa: F401,E501


class ApiResponseOptionsImpliedMove(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'implied_move': 'OptionImpliedMoveData',
        'messages': 'list[str]',
        'underlying_price': 'float',
        'expiration': 'str',
        'atm_strike': 'float',
        'straddle_price': 'float',
        'symbol': 'str'
    }

    attribute_map = {
        'implied_move': 'implied_move',
        'messages': 'messages',
        'underlying_price': 'underlying_price',
        'expiration': 'expiration',
        'atm_strike': 'atm_strike',
        'straddle_price': 'straddle_price',
        'symbol': 'symbol'
    }

    def __init__(self, implied_move=None, messages=None, underlying_price=None, expiration=None, atm_strike=None, straddle_price=None, symbol=None):  # noqa: E501
        """ApiResponseOptionsImpliedMove - a model defined in Swagger"""  # noqa: E501

        self._implied_move = None
        self._messages = None
        self._underlying_price = None
        self._expiration = None
        self._atm_strike = None
        self._straddle_price = None
        self._symbol = None
        self.discriminator = None

        if implied_move is not None:
            self.implied_move = implied_move
        if messages is not None:
            self.messages = messages
        if underlying_price is not None:
            self.underlying_price = underlying_price
        if expiration is not None:
            self.expiration = expiration
        if atm_strike is not None:
            self.atm_strike = atm_strike
        if straddle_price is not None:
            self.straddle_price = straddle_price
        if symbol is not None:
            self.symbol = symbol

    @property
    def implied_move(self):
        """Gets the implied_move of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The data pertaining to the implied move.  # noqa: E501

        :return: The implied_move of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: OptionImpliedMoveData
        """
        return self._implied_move
        
    @property
    def implied_move_dict(self):
        """Gets the implied_move of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The data pertaining to the implied move. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The implied_move of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: OptionImpliedMoveData
        """

        result = None

        value = self.implied_move
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'implied_move': value }

        
        return result
        

    @implied_move.setter
    def implied_move(self, implied_move):
        """Sets the implied_move of this ApiResponseOptionsImpliedMove.

        The data pertaining to the implied move.  # noqa: E501

        :param implied_move: The implied_move of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :type: OptionImpliedMoveData
        """

        self._implied_move = implied_move

    @property
    def messages(self):
        """Gets the messages of this ApiResponseOptionsImpliedMove.  # noqa: E501

        Any messages or warnings about the data  # noqa: E501

        :return: The messages of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages
        
    @property
    def messages_dict(self):
        """Gets the messages of this ApiResponseOptionsImpliedMove.  # noqa: E501

        Any messages or warnings about the data as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The messages of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: list[str]
        """

        result = None

        value = self.messages
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'messages': value }

        
        return result
        

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ApiResponseOptionsImpliedMove.

        Any messages or warnings about the data  # noqa: E501

        :param messages: The messages of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def underlying_price(self):
        """Gets the underlying_price of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The price of the underlying instrument.  # noqa: E501

        :return: The underlying_price of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: float
        """
        return self._underlying_price
        
    @property
    def underlying_price_dict(self):
        """Gets the underlying_price of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The price of the underlying instrument. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The underlying_price of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.underlying_price
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'underlying_price': value }

        
        return result
        

    @underlying_price.setter
    def underlying_price(self, underlying_price):
        """Sets the underlying_price of this ApiResponseOptionsImpliedMove.

        The price of the underlying instrument.  # noqa: E501

        :param underlying_price: The underlying_price of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :type: float
        """

        self._underlying_price = underlying_price

    @property
    def expiration(self):
        """Gets the expiration of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The date on which the Option expires. The Option becomes invalid after this date and cannot be exercised.  # noqa: E501

        :return: The expiration of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: str
        """
        return self._expiration
        
    @property
    def expiration_dict(self):
        """Gets the expiration of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The date on which the Option expires. The Option becomes invalid after this date and cannot be exercised. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The expiration of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: str
        """

        result = None

        value = self.expiration
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'expiration': value }

        
        return result
        

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ApiResponseOptionsImpliedMove.

        The date on which the Option expires. The Option becomes invalid after this date and cannot be exercised.  # noqa: E501

        :param expiration: The expiration of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :type: str
        """

        self._expiration = expiration

    @property
    def atm_strike(self):
        """Gets the atm_strike of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The at-the-money strike price for the implied move calculation.  # noqa: E501

        :return: The atm_strike of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: float
        """
        return self._atm_strike
        
    @property
    def atm_strike_dict(self):
        """Gets the atm_strike of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The at-the-money strike price for the implied move calculation. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The atm_strike of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.atm_strike
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'atm_strike': value }

        
        return result
        

    @atm_strike.setter
    def atm_strike(self, atm_strike):
        """Sets the atm_strike of this ApiResponseOptionsImpliedMove.

        The at-the-money strike price for the implied move calculation.  # noqa: E501

        :param atm_strike: The atm_strike of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :type: float
        """

        self._atm_strike = atm_strike

    @property
    def straddle_price(self):
        """Gets the straddle_price of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The straddle price for the implied move calculation.  # noqa: E501

        :return: The straddle_price of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: float
        """
        return self._straddle_price
        
    @property
    def straddle_price_dict(self):
        """Gets the straddle_price of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The straddle price for the implied move calculation. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The straddle_price of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.straddle_price
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'straddle_price': value }

        
        return result
        

    @straddle_price.setter
    def straddle_price(self, straddle_price):
        """Sets the straddle_price of this ApiResponseOptionsImpliedMove.

        The straddle price for the implied move calculation.  # noqa: E501

        :param straddle_price: The straddle_price of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :type: float
        """

        self._straddle_price = straddle_price

    @property
    def symbol(self):
        """Gets the symbol of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The symbol for the underlying instrument.  # noqa: E501

        :return: The symbol of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: str
        """
        return self._symbol
        
    @property
    def symbol_dict(self):
        """Gets the symbol of this ApiResponseOptionsImpliedMove.  # noqa: E501

        The symbol for the underlying instrument. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The symbol of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :rtype: str
        """

        result = None

        value = self.symbol
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'symbol': value }

        
        return result
        

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ApiResponseOptionsImpliedMove.

        The symbol for the underlying instrument.  # noqa: E501

        :param symbol: The symbol of this ApiResponseOptionsImpliedMove.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponseOptionsImpliedMove):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
