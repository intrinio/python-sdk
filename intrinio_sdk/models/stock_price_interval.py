# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.76.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StockPriceInterval(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'datetime',
        'open': 'float',
        'close': 'float',
        'high': 'float',
        'low': 'float',
        'volume': 'float',
        'close_time': 'datetime',
        'interval': 'str',
        'average': 'float',
        'change': 'float',
        'bid_high': 'float',
        'bid_low': 'float',
        'bid_close': 'float',
        'bid_open': 'float',
        'bid_first_time': 'datetime',
        'bid_last_time': 'datetime',
        'bid_change_percent': 'float',
        'ask_high': 'float',
        'ask_low': 'float',
        'ask_close': 'float',
        'ask_open': 'float',
        'ask_first_time': 'datetime',
        'ask_last_time': 'datetime',
        'ask_change_percent': 'float',
        'trade_count': 'float'
    }

    attribute_map = {
        'time': 'time',
        'open': 'open',
        'close': 'close',
        'high': 'high',
        'low': 'low',
        'volume': 'volume',
        'close_time': 'close_time',
        'interval': 'interval',
        'average': 'average',
        'change': 'change',
        'bid_high': 'bid_high',
        'bid_low': 'bid_low',
        'bid_close': 'bid_close',
        'bid_open': 'bid_open',
        'bid_first_time': 'bid_first_time',
        'bid_last_time': 'bid_last_time',
        'bid_change_percent': 'bid_change_percent',
        'ask_high': 'ask_high',
        'ask_low': 'ask_low',
        'ask_close': 'ask_close',
        'ask_open': 'ask_open',
        'ask_first_time': 'ask_first_time',
        'ask_last_time': 'ask_last_time',
        'ask_change_percent': 'ask_change_percent',
        'trade_count': 'trade_count'
    }

    def __init__(self, time=None, open=None, close=None, high=None, low=None, volume=None, close_time=None, interval=None, average=None, change=None, bid_high=None, bid_low=None, bid_close=None, bid_open=None, bid_first_time=None, bid_last_time=None, bid_change_percent=None, ask_high=None, ask_low=None, ask_close=None, ask_open=None, ask_first_time=None, ask_last_time=None, ask_change_percent=None, trade_count=None):  # noqa: E501
        """StockPriceInterval - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._open = None
        self._close = None
        self._high = None
        self._low = None
        self._volume = None
        self._close_time = None
        self._interval = None
        self._average = None
        self._change = None
        self._bid_high = None
        self._bid_low = None
        self._bid_close = None
        self._bid_open = None
        self._bid_first_time = None
        self._bid_last_time = None
        self._bid_change_percent = None
        self._ask_high = None
        self._ask_low = None
        self._ask_close = None
        self._ask_open = None
        self._ask_first_time = None
        self._ask_last_time = None
        self._ask_change_percent = None
        self._trade_count = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if open is not None:
            self.open = open
        if close is not None:
            self.close = close
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if volume is not None:
            self.volume = volume
        if close_time is not None:
            self.close_time = close_time
        if interval is not None:
            self.interval = interval
        if average is not None:
            self.average = average
        if change is not None:
            self.change = change
        if bid_high is not None:
            self.bid_high = bid_high
        if bid_low is not None:
            self.bid_low = bid_low
        if bid_close is not None:
            self.bid_close = bid_close
        if bid_open is not None:
            self.bid_open = bid_open
        if bid_first_time is not None:
            self.bid_first_time = bid_first_time
        if bid_last_time is not None:
            self.bid_last_time = bid_last_time
        if bid_change_percent is not None:
            self.bid_change_percent = bid_change_percent
        if ask_high is not None:
            self.ask_high = ask_high
        if ask_low is not None:
            self.ask_low = ask_low
        if ask_close is not None:
            self.ask_close = ask_close
        if ask_open is not None:
            self.ask_open = ask_open
        if ask_first_time is not None:
            self.ask_first_time = ask_first_time
        if ask_last_time is not None:
            self.ask_last_time = ask_last_time
        if ask_change_percent is not None:
            self.ask_change_percent = ask_change_percent
        if trade_count is not None:
            self.trade_count = trade_count

    @property
    def time(self):
        """Gets the time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the start of the interval span.  # noqa: E501

        :return: The time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """
        return self._time
        
    @property
    def time_dict(self):
        """Gets the time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the start of the interval span. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """

        result = None

        value = self.time
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'time': value }

        
        return result
        

    @time.setter
    def time(self, time):
        """Sets the time of this StockPriceInterval.

        The timestamp that represents the start of the interval span.  # noqa: E501

        :param time: The time of this StockPriceInterval.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def open(self):
        """Gets the open of this StockPriceInterval.  # noqa: E501

        The first traded price during the period  # noqa: E501

        :return: The open of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._open
        
    @property
    def open_dict(self):
        """Gets the open of this StockPriceInterval.  # noqa: E501

        The first traded price during the period as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The open of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.open
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'open': value }

        
        return result
        

    @open.setter
    def open(self, open):
        """Sets the open of this StockPriceInterval.

        The first traded price during the period  # noqa: E501

        :param open: The open of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def close(self):
        """Gets the close of this StockPriceInterval.  # noqa: E501

        The last traded price during the period  # noqa: E501

        :return: The close of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._close
        
    @property
    def close_dict(self):
        """Gets the close of this StockPriceInterval.  # noqa: E501

        The last traded price during the period as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The close of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.close
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'close': value }

        
        return result
        

    @close.setter
    def close(self, close):
        """Sets the close of this StockPriceInterval.

        The last traded price during the period  # noqa: E501

        :param close: The close of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def high(self):
        """Gets the high of this StockPriceInterval.  # noqa: E501

        The highest price over the span of the period  # noqa: E501

        :return: The high of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._high
        
    @property
    def high_dict(self):
        """Gets the high of this StockPriceInterval.  # noqa: E501

        The highest price over the span of the period as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The high of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.high
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'high': value }

        
        return result
        

    @high.setter
    def high(self, high):
        """Sets the high of this StockPriceInterval.

        The highest price over the span of the period  # noqa: E501

        :param high: The high of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this StockPriceInterval.  # noqa: E501

        The lowest price over the span of the period  # noqa: E501

        :return: The low of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._low
        
    @property
    def low_dict(self):
        """Gets the low of this StockPriceInterval.  # noqa: E501

        The lowest price over the span of the period as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The low of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.low
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'low': value }

        
        return result
        

    @low.setter
    def low(self, low):
        """Sets the low of this StockPriceInterval.

        The lowest price over the span of the period  # noqa: E501

        :param low: The low of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def volume(self):
        """Gets the volume of this StockPriceInterval.  # noqa: E501

        The number of shares exchanged during the period  # noqa: E501

        :return: The volume of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._volume
        
    @property
    def volume_dict(self):
        """Gets the volume of this StockPriceInterval.  # noqa: E501

        The number of shares exchanged during the period as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The volume of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.volume
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'volume': value }

        
        return result
        

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this StockPriceInterval.

        The number of shares exchanged during the period  # noqa: E501

        :param volume: The volume of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def close_time(self):
        """Gets the close_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the end of the interval span.  # noqa: E501

        :return: The close_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """
        return self._close_time
        
    @property
    def close_time_dict(self):
        """Gets the close_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the end of the interval span. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The close_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """

        result = None

        value = self.close_time
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'close_time': value }

        
        return result
        

    @close_time.setter
    def close_time(self, close_time):
        """Sets the close_time of this StockPriceInterval.

        The timestamp that represents the end of the interval span.  # noqa: E501

        :param close_time: The close_time of this StockPriceInterval.  # noqa: E501
        :type: datetime
        """

        self._close_time = close_time

    @property
    def interval(self):
        """Gets the interval of this StockPriceInterval.  # noqa: E501

        The size of the interval.  # noqa: E501

        :return: The interval of this StockPriceInterval.  # noqa: E501
        :rtype: str
        """
        return self._interval
        
    @property
    def interval_dict(self):
        """Gets the interval of this StockPriceInterval.  # noqa: E501

        The size of the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The interval of this StockPriceInterval.  # noqa: E501
        :rtype: str
        """

        result = None

        value = self.interval
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'interval': value }

        
        return result
        

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this StockPriceInterval.

        The size of the interval.  # noqa: E501

        :param interval: The interval of this StockPriceInterval.  # noqa: E501
        :type: str
        """
        allowed_values = ["SixtyMinute", "ThirtyMinute", "FifteenMinute", "TenMinute", "FiveMinute", "OneMinute"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"  # noqa: E501
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def average(self):
        """Gets the average of this StockPriceInterval.  # noqa: E501

        The average trade price of an individual stock during the interval.  # noqa: E501

        :return: The average of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._average
        
    @property
    def average_dict(self):
        """Gets the average of this StockPriceInterval.  # noqa: E501

        The average trade price of an individual stock during the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The average of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.average
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'average': value }

        
        return result
        

    @average.setter
    def average(self, average):
        """Sets the average of this StockPriceInterval.

        The average trade price of an individual stock during the interval.  # noqa: E501

        :param average: The average of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._average = average

    @property
    def change(self):
        """Gets the change of this StockPriceInterval.  # noqa: E501

        The change ratio from open to close.  ((Close - Open)/Open).  # noqa: E501

        :return: The change of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._change
        
    @property
    def change_dict(self):
        """Gets the change of this StockPriceInterval.  # noqa: E501

        The change ratio from open to close.  ((Close - Open)/Open). as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change': value }

        
        return result
        

    @change.setter
    def change(self, change):
        """Sets the change of this StockPriceInterval.

        The change ratio from open to close.  ((Close - Open)/Open).  # noqa: E501

        :param change: The change of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._change = change

    @property
    def bid_high(self):
        """Gets the bid_high of this StockPriceInterval.  # noqa: E501

        The highest bid price from the interval.  # noqa: E501

        :return: The bid_high of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._bid_high
        
    @property
    def bid_high_dict(self):
        """Gets the bid_high of this StockPriceInterval.  # noqa: E501

        The highest bid price from the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The bid_high of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.bid_high
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'bid_high': value }

        
        return result
        

    @bid_high.setter
    def bid_high(self, bid_high):
        """Sets the bid_high of this StockPriceInterval.

        The highest bid price from the interval.  # noqa: E501

        :param bid_high: The bid_high of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._bid_high = bid_high

    @property
    def bid_low(self):
        """Gets the bid_low of this StockPriceInterval.  # noqa: E501

        The lowest bid price from the interval.  # noqa: E501

        :return: The bid_low of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._bid_low
        
    @property
    def bid_low_dict(self):
        """Gets the bid_low of this StockPriceInterval.  # noqa: E501

        The lowest bid price from the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The bid_low of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.bid_low
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'bid_low': value }

        
        return result
        

    @bid_low.setter
    def bid_low(self, bid_low):
        """Sets the bid_low of this StockPriceInterval.

        The lowest bid price from the interval.  # noqa: E501

        :param bid_low: The bid_low of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._bid_low = bid_low

    @property
    def bid_close(self):
        """Gets the bid_close of this StockPriceInterval.  # noqa: E501

        The last bid price from the interval.  # noqa: E501

        :return: The bid_close of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._bid_close
        
    @property
    def bid_close_dict(self):
        """Gets the bid_close of this StockPriceInterval.  # noqa: E501

        The last bid price from the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The bid_close of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.bid_close
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'bid_close': value }

        
        return result
        

    @bid_close.setter
    def bid_close(self, bid_close):
        """Sets the bid_close of this StockPriceInterval.

        The last bid price from the interval.  # noqa: E501

        :param bid_close: The bid_close of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._bid_close = bid_close

    @property
    def bid_open(self):
        """Gets the bid_open of this StockPriceInterval.  # noqa: E501

        The first bid price from the interval.  # noqa: E501

        :return: The bid_open of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._bid_open
        
    @property
    def bid_open_dict(self):
        """Gets the bid_open of this StockPriceInterval.  # noqa: E501

        The first bid price from the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The bid_open of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.bid_open
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'bid_open': value }

        
        return result
        

    @bid_open.setter
    def bid_open(self, bid_open):
        """Sets the bid_open of this StockPriceInterval.

        The first bid price from the interval.  # noqa: E501

        :param bid_open: The bid_open of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._bid_open = bid_open

    @property
    def bid_first_time(self):
        """Gets the bid_first_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the first bid time from the interval span.  # noqa: E501

        :return: The bid_first_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """
        return self._bid_first_time
        
    @property
    def bid_first_time_dict(self):
        """Gets the bid_first_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the first bid time from the interval span. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The bid_first_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """

        result = None

        value = self.bid_first_time
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'bid_first_time': value }

        
        return result
        

    @bid_first_time.setter
    def bid_first_time(self, bid_first_time):
        """Sets the bid_first_time of this StockPriceInterval.

        The timestamp that represents the first bid time from the interval span.  # noqa: E501

        :param bid_first_time: The bid_first_time of this StockPriceInterval.  # noqa: E501
        :type: datetime
        """

        self._bid_first_time = bid_first_time

    @property
    def bid_last_time(self):
        """Gets the bid_last_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the last bid time from the interval span.  # noqa: E501

        :return: The bid_last_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """
        return self._bid_last_time
        
    @property
    def bid_last_time_dict(self):
        """Gets the bid_last_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the last bid time from the interval span. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The bid_last_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """

        result = None

        value = self.bid_last_time
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'bid_last_time': value }

        
        return result
        

    @bid_last_time.setter
    def bid_last_time(self, bid_last_time):
        """Sets the bid_last_time of this StockPriceInterval.

        The timestamp that represents the last bid time from the interval span.  # noqa: E501

        :param bid_last_time: The bid_last_time of this StockPriceInterval.  # noqa: E501
        :type: datetime
        """

        self._bid_last_time = bid_last_time

    @property
    def bid_change_percent(self):
        """Gets the bid_change_percent of this StockPriceInterval.  # noqa: E501

        The ratio of the close to open bid difference, in percent.  # noqa: E501

        :return: The bid_change_percent of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._bid_change_percent
        
    @property
    def bid_change_percent_dict(self):
        """Gets the bid_change_percent of this StockPriceInterval.  # noqa: E501

        The ratio of the close to open bid difference, in percent. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The bid_change_percent of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.bid_change_percent
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'bid_change_percent': value }

        
        return result
        

    @bid_change_percent.setter
    def bid_change_percent(self, bid_change_percent):
        """Sets the bid_change_percent of this StockPriceInterval.

        The ratio of the close to open bid difference, in percent.  # noqa: E501

        :param bid_change_percent: The bid_change_percent of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._bid_change_percent = bid_change_percent

    @property
    def ask_high(self):
        """Gets the ask_high of this StockPriceInterval.  # noqa: E501

        The highest ask price from the interval.  # noqa: E501

        :return: The ask_high of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._ask_high
        
    @property
    def ask_high_dict(self):
        """Gets the ask_high of this StockPriceInterval.  # noqa: E501

        The highest ask price from the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The ask_high of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.ask_high
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'ask_high': value }

        
        return result
        

    @ask_high.setter
    def ask_high(self, ask_high):
        """Sets the ask_high of this StockPriceInterval.

        The highest ask price from the interval.  # noqa: E501

        :param ask_high: The ask_high of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._ask_high = ask_high

    @property
    def ask_low(self):
        """Gets the ask_low of this StockPriceInterval.  # noqa: E501

        The lowest ask price from the interval.  # noqa: E501

        :return: The ask_low of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._ask_low
        
    @property
    def ask_low_dict(self):
        """Gets the ask_low of this StockPriceInterval.  # noqa: E501

        The lowest ask price from the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The ask_low of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.ask_low
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'ask_low': value }

        
        return result
        

    @ask_low.setter
    def ask_low(self, ask_low):
        """Sets the ask_low of this StockPriceInterval.

        The lowest ask price from the interval.  # noqa: E501

        :param ask_low: The ask_low of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._ask_low = ask_low

    @property
    def ask_close(self):
        """Gets the ask_close of this StockPriceInterval.  # noqa: E501

        The last ask price from the interval.  # noqa: E501

        :return: The ask_close of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._ask_close
        
    @property
    def ask_close_dict(self):
        """Gets the ask_close of this StockPriceInterval.  # noqa: E501

        The last ask price from the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The ask_close of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.ask_close
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'ask_close': value }

        
        return result
        

    @ask_close.setter
    def ask_close(self, ask_close):
        """Sets the ask_close of this StockPriceInterval.

        The last ask price from the interval.  # noqa: E501

        :param ask_close: The ask_close of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._ask_close = ask_close

    @property
    def ask_open(self):
        """Gets the ask_open of this StockPriceInterval.  # noqa: E501

        The first ask price from the interval.  # noqa: E501

        :return: The ask_open of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._ask_open
        
    @property
    def ask_open_dict(self):
        """Gets the ask_open of this StockPriceInterval.  # noqa: E501

        The first ask price from the interval. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The ask_open of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.ask_open
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'ask_open': value }

        
        return result
        

    @ask_open.setter
    def ask_open(self, ask_open):
        """Sets the ask_open of this StockPriceInterval.

        The first ask price from the interval.  # noqa: E501

        :param ask_open: The ask_open of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._ask_open = ask_open

    @property
    def ask_first_time(self):
        """Gets the ask_first_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the first ask time from the interval span.  # noqa: E501

        :return: The ask_first_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """
        return self._ask_first_time
        
    @property
    def ask_first_time_dict(self):
        """Gets the ask_first_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the first ask time from the interval span. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The ask_first_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """

        result = None

        value = self.ask_first_time
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'ask_first_time': value }

        
        return result
        

    @ask_first_time.setter
    def ask_first_time(self, ask_first_time):
        """Sets the ask_first_time of this StockPriceInterval.

        The timestamp that represents the first ask time from the interval span.  # noqa: E501

        :param ask_first_time: The ask_first_time of this StockPriceInterval.  # noqa: E501
        :type: datetime
        """

        self._ask_first_time = ask_first_time

    @property
    def ask_last_time(self):
        """Gets the ask_last_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the last ask time from the interval span.  # noqa: E501

        :return: The ask_last_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """
        return self._ask_last_time
        
    @property
    def ask_last_time_dict(self):
        """Gets the ask_last_time of this StockPriceInterval.  # noqa: E501

        The timestamp that represents the last ask time from the interval span. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The ask_last_time of this StockPriceInterval.  # noqa: E501
        :rtype: datetime
        """

        result = None

        value = self.ask_last_time
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'ask_last_time': value }

        
        return result
        

    @ask_last_time.setter
    def ask_last_time(self, ask_last_time):
        """Sets the ask_last_time of this StockPriceInterval.

        The timestamp that represents the last ask time from the interval span.  # noqa: E501

        :param ask_last_time: The ask_last_time of this StockPriceInterval.  # noqa: E501
        :type: datetime
        """

        self._ask_last_time = ask_last_time

    @property
    def ask_change_percent(self):
        """Gets the ask_change_percent of this StockPriceInterval.  # noqa: E501

        The ratio of the close to open ask difference, in percent.  # noqa: E501

        :return: The ask_change_percent of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._ask_change_percent
        
    @property
    def ask_change_percent_dict(self):
        """Gets the ask_change_percent of this StockPriceInterval.  # noqa: E501

        The ratio of the close to open ask difference, in percent. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The ask_change_percent of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.ask_change_percent
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'ask_change_percent': value }

        
        return result
        

    @ask_change_percent.setter
    def ask_change_percent(self, ask_change_percent):
        """Sets the ask_change_percent of this StockPriceInterval.

        The ratio of the close to open ask difference, in percent.  # noqa: E501

        :param ask_change_percent: The ask_change_percent of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._ask_change_percent = ask_change_percent

    @property
    def trade_count(self):
        """Gets the trade_count of this StockPriceInterval.  # noqa: E501

        The number of qualified trades executed during the period  # noqa: E501

        :return: The trade_count of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """
        return self._trade_count
        
    @property
    def trade_count_dict(self):
        """Gets the trade_count of this StockPriceInterval.  # noqa: E501

        The number of qualified trades executed during the period as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The trade_count of this StockPriceInterval.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.trade_count
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'trade_count': value }

        
        return result
        

    @trade_count.setter
    def trade_count(self, trade_count):
        """Sets the trade_count of this StockPriceInterval.

        The number of qualified trades executed during the period  # noqa: E501

        :param trade_count: The trade_count of this StockPriceInterval.  # noqa: E501
        :type: float
        """

        self._trade_count = trade_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockPriceInterval):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
