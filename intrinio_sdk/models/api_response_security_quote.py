# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://docs.intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.76.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from intrinio_sdk.models.security_summary import SecuritySummary  # noqa: F401,E501


class ApiResponseSecurityQuote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'security': 'SecuritySummary',
        'last': 'float',
        'last_time': 'datetime',
        'source': 'str',
        'open': 'float',
        'high': 'float',
        'low': 'float',
        'exchange_volume': 'float',
        'market_volume': 'float',
        'eod_fifty_two_week_high': 'float',
        'eod_fifty_two_week_low': 'float',
        'marketcap': 'float',
        'pricetoearnings': 'float',
        'previous_close': 'float',
        'previous_close_date': 'date',
        'change': 'float',
        'change_percent': 'float',
        'adj_close_5_days_ago': 'float',
        'adj_close_30_days_ago': 'float',
        'adj_close_90_days_ago': 'float',
        'adj_close_180_days_ago': 'float',
        'adj_close_365_days_ago': 'float',
        'adj_close_730_days_ago': 'float',
        'adj_close_1825_days_ago': 'float',
        'adj_close_year_to_date': 'float',
        'change_percent_5_days': 'float',
        'change_percent_30_days': 'float',
        'change_percent_90_days': 'float',
        'change_percent_180_days': 'float',
        'change_percent_365_days': 'float',
        'change_percent_730_days_ago': 'float',
        'change_percent_1825_days': 'float',
        'change_percent_year_to_date': 'float',
        'extended_hours_last': 'float',
        'extended_hours_change': 'float',
        'extended_hours_change_percent': 'float'
    }

    attribute_map = {
        'security': 'security',
        'last': 'last',
        'last_time': 'last_time',
        'source': 'source',
        'open': 'open',
        'high': 'high',
        'low': 'low',
        'exchange_volume': 'exchange_volume',
        'market_volume': 'market_volume',
        'eod_fifty_two_week_high': 'eod_fifty_two_week_high',
        'eod_fifty_two_week_low': 'eod_fifty_two_week_low',
        'marketcap': 'marketcap',
        'pricetoearnings': 'pricetoearnings',
        'previous_close': 'previous_close',
        'previous_close_date': 'previous_close_date',
        'change': 'change',
        'change_percent': 'change_percent',
        'adj_close_5_days_ago': 'adj_close_5_days_ago',
        'adj_close_30_days_ago': 'adj_close_30_days_ago',
        'adj_close_90_days_ago': 'adj_close_90_days_ago',
        'adj_close_180_days_ago': 'adj_close_180_days_ago',
        'adj_close_365_days_ago': 'adj_close_365_days_ago',
        'adj_close_730_days_ago': 'adj_close_730_days_ago',
        'adj_close_1825_days_ago': 'adj_close_1825_days_ago',
        'adj_close_year_to_date': 'adj_close_year_to_date',
        'change_percent_5_days': 'change_percent_5_days',
        'change_percent_30_days': 'change_percent_30_days',
        'change_percent_90_days': 'change_percent_90_days',
        'change_percent_180_days': 'change_percent_180_days',
        'change_percent_365_days': 'change_percent_365_days',
        'change_percent_730_days_ago': 'change_percent_730_days_ago',
        'change_percent_1825_days': 'change_percent_1825_days',
        'change_percent_year_to_date': 'change_percent_year_to_date',
        'extended_hours_last': 'extended_hours_last',
        'extended_hours_change': 'extended_hours_change',
        'extended_hours_change_percent': 'extended_hours_change_percent'
    }

    def __init__(self, security=None, last=None, last_time=None, source=None, open=None, high=None, low=None, exchange_volume=None, market_volume=None, eod_fifty_two_week_high=None, eod_fifty_two_week_low=None, marketcap=None, pricetoearnings=None, previous_close=None, previous_close_date=None, change=None, change_percent=None, adj_close_5_days_ago=None, adj_close_30_days_ago=None, adj_close_90_days_ago=None, adj_close_180_days_ago=None, adj_close_365_days_ago=None, adj_close_730_days_ago=None, adj_close_1825_days_ago=None, adj_close_year_to_date=None, change_percent_5_days=None, change_percent_30_days=None, change_percent_90_days=None, change_percent_180_days=None, change_percent_365_days=None, change_percent_730_days_ago=None, change_percent_1825_days=None, change_percent_year_to_date=None, extended_hours_last=None, extended_hours_change=None, extended_hours_change_percent=None):  # noqa: E501
        """ApiResponseSecurityQuote - a model defined in Swagger"""  # noqa: E501

        self._security = None
        self._last = None
        self._last_time = None
        self._source = None
        self._open = None
        self._high = None
        self._low = None
        self._exchange_volume = None
        self._market_volume = None
        self._eod_fifty_two_week_high = None
        self._eod_fifty_two_week_low = None
        self._marketcap = None
        self._pricetoearnings = None
        self._previous_close = None
        self._previous_close_date = None
        self._change = None
        self._change_percent = None
        self._adj_close_5_days_ago = None
        self._adj_close_30_days_ago = None
        self._adj_close_90_days_ago = None
        self._adj_close_180_days_ago = None
        self._adj_close_365_days_ago = None
        self._adj_close_730_days_ago = None
        self._adj_close_1825_days_ago = None
        self._adj_close_year_to_date = None
        self._change_percent_5_days = None
        self._change_percent_30_days = None
        self._change_percent_90_days = None
        self._change_percent_180_days = None
        self._change_percent_365_days = None
        self._change_percent_730_days_ago = None
        self._change_percent_1825_days = None
        self._change_percent_year_to_date = None
        self._extended_hours_last = None
        self._extended_hours_change = None
        self._extended_hours_change_percent = None
        self.discriminator = None

        if security is not None:
            self.security = security
        if last is not None:
            self.last = last
        if last_time is not None:
            self.last_time = last_time
        if source is not None:
            self.source = source
        if open is not None:
            self.open = open
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if exchange_volume is not None:
            self.exchange_volume = exchange_volume
        if market_volume is not None:
            self.market_volume = market_volume
        if eod_fifty_two_week_high is not None:
            self.eod_fifty_two_week_high = eod_fifty_two_week_high
        if eod_fifty_two_week_low is not None:
            self.eod_fifty_two_week_low = eod_fifty_two_week_low
        if marketcap is not None:
            self.marketcap = marketcap
        if pricetoearnings is not None:
            self.pricetoearnings = pricetoearnings
        if previous_close is not None:
            self.previous_close = previous_close
        if previous_close_date is not None:
            self.previous_close_date = previous_close_date
        if change is not None:
            self.change = change
        if change_percent is not None:
            self.change_percent = change_percent
        if adj_close_5_days_ago is not None:
            self.adj_close_5_days_ago = adj_close_5_days_ago
        if adj_close_30_days_ago is not None:
            self.adj_close_30_days_ago = adj_close_30_days_ago
        if adj_close_90_days_ago is not None:
            self.adj_close_90_days_ago = adj_close_90_days_ago
        if adj_close_180_days_ago is not None:
            self.adj_close_180_days_ago = adj_close_180_days_ago
        if adj_close_365_days_ago is not None:
            self.adj_close_365_days_ago = adj_close_365_days_ago
        if adj_close_730_days_ago is not None:
            self.adj_close_730_days_ago = adj_close_730_days_ago
        if adj_close_1825_days_ago is not None:
            self.adj_close_1825_days_ago = adj_close_1825_days_ago
        if adj_close_year_to_date is not None:
            self.adj_close_year_to_date = adj_close_year_to_date
        if change_percent_5_days is not None:
            self.change_percent_5_days = change_percent_5_days
        if change_percent_30_days is not None:
            self.change_percent_30_days = change_percent_30_days
        if change_percent_90_days is not None:
            self.change_percent_90_days = change_percent_90_days
        if change_percent_180_days is not None:
            self.change_percent_180_days = change_percent_180_days
        if change_percent_365_days is not None:
            self.change_percent_365_days = change_percent_365_days
        if change_percent_730_days_ago is not None:
            self.change_percent_730_days_ago = change_percent_730_days_ago
        if change_percent_1825_days is not None:
            self.change_percent_1825_days = change_percent_1825_days
        if change_percent_year_to_date is not None:
            self.change_percent_year_to_date = change_percent_year_to_date
        if extended_hours_last is not None:
            self.extended_hours_last = extended_hours_last
        if extended_hours_change is not None:
            self.extended_hours_change = extended_hours_change
        if extended_hours_change_percent is not None:
            self.extended_hours_change_percent = extended_hours_change_percent

    @property
    def security(self):
        """Gets the security of this ApiResponseSecurityQuote.  # noqa: E501

        The Security of the stock quote  # noqa: E501

        :return: The security of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: SecuritySummary
        """
        return self._security
        
    @property
    def security_dict(self):
        """Gets the security of this ApiResponseSecurityQuote.  # noqa: E501

        The Security of the stock quote as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The security of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: SecuritySummary
        """

        result = None

        value = self.security
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'security': value }

        
        return result
        

    @security.setter
    def security(self, security):
        """Sets the security of this ApiResponseSecurityQuote.

        The Security of the stock quote  # noqa: E501

        :param security: The security of this ApiResponseSecurityQuote.  # noqa: E501
        :type: SecuritySummary
        """

        self._security = security

    @property
    def last(self):
        """Gets the last of this ApiResponseSecurityQuote.  # noqa: E501

        The price of the latest trade  # noqa: E501

        :return: The last of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._last
        
    @property
    def last_dict(self):
        """Gets the last of this ApiResponseSecurityQuote.  # noqa: E501

        The price of the latest trade as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The last of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.last
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'last': value }

        
        return result
        

    @last.setter
    def last(self, last):
        """Sets the last of this ApiResponseSecurityQuote.

        The price of the latest trade  # noqa: E501

        :param last: The last of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._last = last

    @property
    def last_time(self):
        """Gets the last_time of this ApiResponseSecurityQuote.  # noqa: E501

        The date and time when the last trade occurred.  # noqa: E501

        :return: The last_time of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: datetime
        """
        return self._last_time
        
    @property
    def last_time_dict(self):
        """Gets the last_time of this ApiResponseSecurityQuote.  # noqa: E501

        The date and time when the last trade occurred. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The last_time of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: datetime
        """

        result = None

        value = self.last_time
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'last_time': value }

        
        return result
        

    @last_time.setter
    def last_time(self, last_time):
        """Sets the last_time of this ApiResponseSecurityQuote.

        The date and time when the last trade occurred.  # noqa: E501

        :param last_time: The last_time of this ApiResponseSecurityQuote.  # noqa: E501
        :type: datetime
        """

        self._last_time = last_time

    @property
    def source(self):
        """Gets the source of this ApiResponseSecurityQuote.  # noqa: E501

        The source of the pricing data.  # noqa: E501

        :return: The source of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: str
        """
        return self._source
        
    @property
    def source_dict(self):
        """Gets the source of this ApiResponseSecurityQuote.  # noqa: E501

        The source of the pricing data. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The source of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: str
        """

        result = None

        value = self.source
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'source': value }

        
        return result
        

    @source.setter
    def source(self, source):
        """Sets the source of this ApiResponseSecurityQuote.

        The source of the pricing data.  # noqa: E501

        :param source: The source of this ApiResponseSecurityQuote.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def open(self):
        """Gets the open of this ApiResponseSecurityQuote.  # noqa: E501

        The open price from the latest day of trading.  # noqa: E501

        :return: The open of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._open
        
    @property
    def open_dict(self):
        """Gets the open of this ApiResponseSecurityQuote.  # noqa: E501

        The open price from the latest day of trading. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The open of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.open
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'open': value }

        
        return result
        

    @open.setter
    def open(self, open):
        """Sets the open of this ApiResponseSecurityQuote.

        The open price from the latest day of trading.  # noqa: E501

        :param open: The open of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def high(self):
        """Gets the high of this ApiResponseSecurityQuote.  # noqa: E501

        The highest price from the latest day of trading.  # noqa: E501

        :return: The high of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._high
        
    @property
    def high_dict(self):
        """Gets the high of this ApiResponseSecurityQuote.  # noqa: E501

        The highest price from the latest day of trading. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The high of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.high
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'high': value }

        
        return result
        

    @high.setter
    def high(self, high):
        """Sets the high of this ApiResponseSecurityQuote.

        The highest price from the latest day of trading.  # noqa: E501

        :param high: The high of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this ApiResponseSecurityQuote.  # noqa: E501

        The lowest price from the latest day of trading.  # noqa: E501

        :return: The low of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._low
        
    @property
    def low_dict(self):
        """Gets the low of this ApiResponseSecurityQuote.  # noqa: E501

        The lowest price from the latest day of trading. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The low of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.low
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'low': value }

        
        return result
        

    @low.setter
    def low(self, low):
        """Sets the low of this ApiResponseSecurityQuote.

        The lowest price from the latest day of trading.  # noqa: E501

        :param low: The low of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def exchange_volume(self):
        """Gets the exchange_volume of this ApiResponseSecurityQuote.  # noqa: E501

        The volume of the security from the source.  # noqa: E501

        :return: The exchange_volume of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._exchange_volume
        
    @property
    def exchange_volume_dict(self):
        """Gets the exchange_volume of this ApiResponseSecurityQuote.  # noqa: E501

        The volume of the security from the source. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The exchange_volume of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.exchange_volume
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'exchange_volume': value }

        
        return result
        

    @exchange_volume.setter
    def exchange_volume(self, exchange_volume):
        """Sets the exchange_volume of this ApiResponseSecurityQuote.

        The volume of the security from the source.  # noqa: E501

        :param exchange_volume: The exchange_volume of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._exchange_volume = exchange_volume

    @property
    def market_volume(self):
        """Gets the market_volume of this ApiResponseSecurityQuote.  # noqa: E501

        The volume of the security for the entire market.  # noqa: E501

        :return: The market_volume of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._market_volume
        
    @property
    def market_volume_dict(self):
        """Gets the market_volume of this ApiResponseSecurityQuote.  # noqa: E501

        The volume of the security for the entire market. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The market_volume of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.market_volume
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'market_volume': value }

        
        return result
        

    @market_volume.setter
    def market_volume(self, market_volume):
        """Sets the market_volume of this ApiResponseSecurityQuote.

        The volume of the security for the entire market.  # noqa: E501

        :param market_volume: The market_volume of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._market_volume = market_volume

    @property
    def eod_fifty_two_week_high(self):
        """Gets the eod_fifty_two_week_high of this ApiResponseSecurityQuote.  # noqa: E501

        The 52 week high price.  # noqa: E501

        :return: The eod_fifty_two_week_high of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._eod_fifty_two_week_high
        
    @property
    def eod_fifty_two_week_high_dict(self):
        """Gets the eod_fifty_two_week_high of this ApiResponseSecurityQuote.  # noqa: E501

        The 52 week high price. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The eod_fifty_two_week_high of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.eod_fifty_two_week_high
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'eod_fifty_two_week_high': value }

        
        return result
        

    @eod_fifty_two_week_high.setter
    def eod_fifty_two_week_high(self, eod_fifty_two_week_high):
        """Sets the eod_fifty_two_week_high of this ApiResponseSecurityQuote.

        The 52 week high price.  # noqa: E501

        :param eod_fifty_two_week_high: The eod_fifty_two_week_high of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._eod_fifty_two_week_high = eod_fifty_two_week_high

    @property
    def eod_fifty_two_week_low(self):
        """Gets the eod_fifty_two_week_low of this ApiResponseSecurityQuote.  # noqa: E501

        The 52 week low price.  # noqa: E501

        :return: The eod_fifty_two_week_low of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._eod_fifty_two_week_low
        
    @property
    def eod_fifty_two_week_low_dict(self):
        """Gets the eod_fifty_two_week_low of this ApiResponseSecurityQuote.  # noqa: E501

        The 52 week low price. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The eod_fifty_two_week_low of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.eod_fifty_two_week_low
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'eod_fifty_two_week_low': value }

        
        return result
        

    @eod_fifty_two_week_low.setter
    def eod_fifty_two_week_low(self, eod_fifty_two_week_low):
        """Sets the eod_fifty_two_week_low of this ApiResponseSecurityQuote.

        The 52 week low price.  # noqa: E501

        :param eod_fifty_two_week_low: The eod_fifty_two_week_low of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._eod_fifty_two_week_low = eod_fifty_two_week_low

    @property
    def marketcap(self):
        """Gets the marketcap of this ApiResponseSecurityQuote.  # noqa: E501

        The current market cap.  # noqa: E501

        :return: The marketcap of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._marketcap
        
    @property
    def marketcap_dict(self):
        """Gets the marketcap of this ApiResponseSecurityQuote.  # noqa: E501

        The current market cap. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The marketcap of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.marketcap
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'marketcap': value }

        
        return result
        

    @marketcap.setter
    def marketcap(self, marketcap):
        """Sets the marketcap of this ApiResponseSecurityQuote.

        The current market cap.  # noqa: E501

        :param marketcap: The marketcap of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._marketcap = marketcap

    @property
    def pricetoearnings(self):
        """Gets the pricetoearnings of this ApiResponseSecurityQuote.  # noqa: E501

        The current price to earnings.  # noqa: E501

        :return: The pricetoearnings of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._pricetoearnings
        
    @property
    def pricetoearnings_dict(self):
        """Gets the pricetoearnings of this ApiResponseSecurityQuote.  # noqa: E501

        The current price to earnings. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The pricetoearnings of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.pricetoearnings
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'pricetoearnings': value }

        
        return result
        

    @pricetoearnings.setter
    def pricetoearnings(self, pricetoearnings):
        """Sets the pricetoearnings of this ApiResponseSecurityQuote.

        The current price to earnings.  # noqa: E501

        :param pricetoearnings: The pricetoearnings of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._pricetoearnings = pricetoearnings

    @property
    def previous_close(self):
        """Gets the previous_close of this ApiResponseSecurityQuote.  # noqa: E501

        The previous close price.  # noqa: E501

        :return: The previous_close of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._previous_close
        
    @property
    def previous_close_dict(self):
        """Gets the previous_close of this ApiResponseSecurityQuote.  # noqa: E501

        The previous close price. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The previous_close of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.previous_close
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'previous_close': value }

        
        return result
        

    @previous_close.setter
    def previous_close(self, previous_close):
        """Sets the previous_close of this ApiResponseSecurityQuote.

        The previous close price.  # noqa: E501

        :param previous_close: The previous_close of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._previous_close = previous_close

    @property
    def previous_close_date(self):
        """Gets the previous_close_date of this ApiResponseSecurityQuote.  # noqa: E501

        The date of the previous close.  # noqa: E501

        :return: The previous_close_date of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: date
        """
        return self._previous_close_date
        
    @property
    def previous_close_date_dict(self):
        """Gets the previous_close_date of this ApiResponseSecurityQuote.  # noqa: E501

        The date of the previous close. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The previous_close_date of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: date
        """

        result = None

        value = self.previous_close_date
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'previous_close_date': value }

        
        return result
        

    @previous_close_date.setter
    def previous_close_date(self, previous_close_date):
        """Sets the previous_close_date of this ApiResponseSecurityQuote.

        The date of the previous close.  # noqa: E501

        :param previous_close_date: The previous_close_date of this ApiResponseSecurityQuote.  # noqa: E501
        :type: date
        """

        self._previous_close_date = previous_close_date

    @property
    def change(self):
        """Gets the change of this ApiResponseSecurityQuote.  # noqa: E501

        The difference in last price from the last close price  # noqa: E501

        :return: The change of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change
        
    @property
    def change_dict(self):
        """Gets the change of this ApiResponseSecurityQuote.  # noqa: E501

        The difference in last price from the last close price as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change': value }

        
        return result
        

    @change.setter
    def change(self, change):
        """Sets the change of this ApiResponseSecurityQuote.

        The difference in last price from the last close price  # noqa: E501

        :param change: The change of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change = change

    @property
    def change_percent(self):
        """Gets the change_percent of this ApiResponseSecurityQuote.  # noqa: E501

        The percent difference in last price from the last close price  # noqa: E501

        :return: The change_percent of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent
        
    @property
    def change_percent_dict(self):
        """Gets the change_percent of this ApiResponseSecurityQuote.  # noqa: E501

        The percent difference in last price from the last close price as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent': value }

        
        return result
        

    @change_percent.setter
    def change_percent(self, change_percent):
        """Sets the change_percent of this ApiResponseSecurityQuote.

        The percent difference in last price from the last close price  # noqa: E501

        :param change_percent: The change_percent of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent = change_percent

    @property
    def adj_close_5_days_ago(self):
        """Gets the adj_close_5_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 5 days ago.  # noqa: E501

        :return: The adj_close_5_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._adj_close_5_days_ago
        
    @property
    def adj_close_5_days_ago_dict(self):
        """Gets the adj_close_5_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 5 days ago. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The adj_close_5_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.adj_close_5_days_ago
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'adj_close_5_days_ago': value }

        
        return result
        

    @adj_close_5_days_ago.setter
    def adj_close_5_days_ago(self, adj_close_5_days_ago):
        """Sets the adj_close_5_days_ago of this ApiResponseSecurityQuote.

        The adjusted close price 5 days ago.  # noqa: E501

        :param adj_close_5_days_ago: The adj_close_5_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._adj_close_5_days_ago = adj_close_5_days_ago

    @property
    def adj_close_30_days_ago(self):
        """Gets the adj_close_30_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 30 days ago.  # noqa: E501

        :return: The adj_close_30_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._adj_close_30_days_ago
        
    @property
    def adj_close_30_days_ago_dict(self):
        """Gets the adj_close_30_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 30 days ago. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The adj_close_30_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.adj_close_30_days_ago
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'adj_close_30_days_ago': value }

        
        return result
        

    @adj_close_30_days_ago.setter
    def adj_close_30_days_ago(self, adj_close_30_days_ago):
        """Sets the adj_close_30_days_ago of this ApiResponseSecurityQuote.

        The adjusted close price 30 days ago.  # noqa: E501

        :param adj_close_30_days_ago: The adj_close_30_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._adj_close_30_days_ago = adj_close_30_days_ago

    @property
    def adj_close_90_days_ago(self):
        """Gets the adj_close_90_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 90 days ago.  # noqa: E501

        :return: The adj_close_90_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._adj_close_90_days_ago
        
    @property
    def adj_close_90_days_ago_dict(self):
        """Gets the adj_close_90_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 90 days ago. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The adj_close_90_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.adj_close_90_days_ago
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'adj_close_90_days_ago': value }

        
        return result
        

    @adj_close_90_days_ago.setter
    def adj_close_90_days_ago(self, adj_close_90_days_ago):
        """Sets the adj_close_90_days_ago of this ApiResponseSecurityQuote.

        The adjusted close price 90 days ago.  # noqa: E501

        :param adj_close_90_days_ago: The adj_close_90_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._adj_close_90_days_ago = adj_close_90_days_ago

    @property
    def adj_close_180_days_ago(self):
        """Gets the adj_close_180_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 180 days ago.  # noqa: E501

        :return: The adj_close_180_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._adj_close_180_days_ago
        
    @property
    def adj_close_180_days_ago_dict(self):
        """Gets the adj_close_180_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 180 days ago. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The adj_close_180_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.adj_close_180_days_ago
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'adj_close_180_days_ago': value }

        
        return result
        

    @adj_close_180_days_ago.setter
    def adj_close_180_days_ago(self, adj_close_180_days_ago):
        """Sets the adj_close_180_days_ago of this ApiResponseSecurityQuote.

        The adjusted close price 180 days ago.  # noqa: E501

        :param adj_close_180_days_ago: The adj_close_180_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._adj_close_180_days_ago = adj_close_180_days_ago

    @property
    def adj_close_365_days_ago(self):
        """Gets the adj_close_365_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 365 days ago.  # noqa: E501

        :return: The adj_close_365_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._adj_close_365_days_ago
        
    @property
    def adj_close_365_days_ago_dict(self):
        """Gets the adj_close_365_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 365 days ago. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The adj_close_365_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.adj_close_365_days_ago
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'adj_close_365_days_ago': value }

        
        return result
        

    @adj_close_365_days_ago.setter
    def adj_close_365_days_ago(self, adj_close_365_days_ago):
        """Sets the adj_close_365_days_ago of this ApiResponseSecurityQuote.

        The adjusted close price 365 days ago.  # noqa: E501

        :param adj_close_365_days_ago: The adj_close_365_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._adj_close_365_days_ago = adj_close_365_days_ago

    @property
    def adj_close_730_days_ago(self):
        """Gets the adj_close_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 730 days ago.  # noqa: E501

        :return: The adj_close_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._adj_close_730_days_ago
        
    @property
    def adj_close_730_days_ago_dict(self):
        """Gets the adj_close_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 730 days ago. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The adj_close_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.adj_close_730_days_ago
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'adj_close_730_days_ago': value }

        
        return result
        

    @adj_close_730_days_ago.setter
    def adj_close_730_days_ago(self, adj_close_730_days_ago):
        """Sets the adj_close_730_days_ago of this ApiResponseSecurityQuote.

        The adjusted close price 730 days ago.  # noqa: E501

        :param adj_close_730_days_ago: The adj_close_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._adj_close_730_days_ago = adj_close_730_days_ago

    @property
    def adj_close_1825_days_ago(self):
        """Gets the adj_close_1825_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 1825 days ago.  # noqa: E501

        :return: The adj_close_1825_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._adj_close_1825_days_ago
        
    @property
    def adj_close_1825_days_ago_dict(self):
        """Gets the adj_close_1825_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price 1825 days ago. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The adj_close_1825_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.adj_close_1825_days_ago
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'adj_close_1825_days_ago': value }

        
        return result
        

    @adj_close_1825_days_ago.setter
    def adj_close_1825_days_ago(self, adj_close_1825_days_ago):
        """Sets the adj_close_1825_days_ago of this ApiResponseSecurityQuote.

        The adjusted close price 1825 days ago.  # noqa: E501

        :param adj_close_1825_days_ago: The adj_close_1825_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._adj_close_1825_days_ago = adj_close_1825_days_ago

    @property
    def adj_close_year_to_date(self):
        """Gets the adj_close_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price at the start of the calendar year.  # noqa: E501

        :return: The adj_close_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._adj_close_year_to_date
        
    @property
    def adj_close_year_to_date_dict(self):
        """Gets the adj_close_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501

        The adjusted close price at the start of the calendar year. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The adj_close_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.adj_close_year_to_date
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'adj_close_year_to_date': value }

        
        return result
        

    @adj_close_year_to_date.setter
    def adj_close_year_to_date(self, adj_close_year_to_date):
        """Sets the adj_close_year_to_date of this ApiResponseSecurityQuote.

        The adjusted close price at the start of the calendar year.  # noqa: E501

        :param adj_close_year_to_date: The adj_close_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._adj_close_year_to_date = adj_close_year_to_date

    @property
    def change_percent_5_days(self):
        """Gets the change_percent_5_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 5 days ago to now.  # noqa: E501

        :return: The change_percent_5_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent_5_days
        
    @property
    def change_percent_5_days_dict(self):
        """Gets the change_percent_5_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 5 days ago to now. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent_5_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent_5_days
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent_5_days': value }

        
        return result
        

    @change_percent_5_days.setter
    def change_percent_5_days(self, change_percent_5_days):
        """Sets the change_percent_5_days of this ApiResponseSecurityQuote.

        The percent change from the adjusted price 5 days ago to now.  # noqa: E501

        :param change_percent_5_days: The change_percent_5_days of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent_5_days = change_percent_5_days

    @property
    def change_percent_30_days(self):
        """Gets the change_percent_30_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 30 days ago to now.  # noqa: E501

        :return: The change_percent_30_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent_30_days
        
    @property
    def change_percent_30_days_dict(self):
        """Gets the change_percent_30_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 30 days ago to now. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent_30_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent_30_days
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent_30_days': value }

        
        return result
        

    @change_percent_30_days.setter
    def change_percent_30_days(self, change_percent_30_days):
        """Sets the change_percent_30_days of this ApiResponseSecurityQuote.

        The percent change from the adjusted price 30 days ago to now.  # noqa: E501

        :param change_percent_30_days: The change_percent_30_days of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent_30_days = change_percent_30_days

    @property
    def change_percent_90_days(self):
        """Gets the change_percent_90_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 90 days ago to now.  # noqa: E501

        :return: The change_percent_90_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent_90_days
        
    @property
    def change_percent_90_days_dict(self):
        """Gets the change_percent_90_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 90 days ago to now. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent_90_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent_90_days
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent_90_days': value }

        
        return result
        

    @change_percent_90_days.setter
    def change_percent_90_days(self, change_percent_90_days):
        """Sets the change_percent_90_days of this ApiResponseSecurityQuote.

        The percent change from the adjusted price 90 days ago to now.  # noqa: E501

        :param change_percent_90_days: The change_percent_90_days of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent_90_days = change_percent_90_days

    @property
    def change_percent_180_days(self):
        """Gets the change_percent_180_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 180 days ago to now.  # noqa: E501

        :return: The change_percent_180_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent_180_days
        
    @property
    def change_percent_180_days_dict(self):
        """Gets the change_percent_180_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 180 days ago to now. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent_180_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent_180_days
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent_180_days': value }

        
        return result
        

    @change_percent_180_days.setter
    def change_percent_180_days(self, change_percent_180_days):
        """Sets the change_percent_180_days of this ApiResponseSecurityQuote.

        The percent change from the adjusted price 180 days ago to now.  # noqa: E501

        :param change_percent_180_days: The change_percent_180_days of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent_180_days = change_percent_180_days

    @property
    def change_percent_365_days(self):
        """Gets the change_percent_365_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 365 days ago to now.  # noqa: E501

        :return: The change_percent_365_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent_365_days
        
    @property
    def change_percent_365_days_dict(self):
        """Gets the change_percent_365_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 365 days ago to now. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent_365_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent_365_days
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent_365_days': value }

        
        return result
        

    @change_percent_365_days.setter
    def change_percent_365_days(self, change_percent_365_days):
        """Sets the change_percent_365_days of this ApiResponseSecurityQuote.

        The percent change from the adjusted price 365 days ago to now.  # noqa: E501

        :param change_percent_365_days: The change_percent_365_days of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent_365_days = change_percent_365_days

    @property
    def change_percent_730_days_ago(self):
        """Gets the change_percent_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 730 days ago to now.  # noqa: E501

        :return: The change_percent_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent_730_days_ago
        
    @property
    def change_percent_730_days_ago_dict(self):
        """Gets the change_percent_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 730 days ago to now. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent_730_days_ago
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent_730_days_ago': value }

        
        return result
        

    @change_percent_730_days_ago.setter
    def change_percent_730_days_ago(self, change_percent_730_days_ago):
        """Sets the change_percent_730_days_ago of this ApiResponseSecurityQuote.

        The percent change from the adjusted price 730 days ago to now.  # noqa: E501

        :param change_percent_730_days_ago: The change_percent_730_days_ago of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent_730_days_ago = change_percent_730_days_ago

    @property
    def change_percent_1825_days(self):
        """Gets the change_percent_1825_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 1825 days ago to now.  # noqa: E501

        :return: The change_percent_1825_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent_1825_days
        
    @property
    def change_percent_1825_days_dict(self):
        """Gets the change_percent_1825_days of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price 1825 days ago to now. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent_1825_days of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent_1825_days
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent_1825_days': value }

        
        return result
        

    @change_percent_1825_days.setter
    def change_percent_1825_days(self, change_percent_1825_days):
        """Sets the change_percent_1825_days of this ApiResponseSecurityQuote.

        The percent change from the adjusted price 1825 days ago to now.  # noqa: E501

        :param change_percent_1825_days: The change_percent_1825_days of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent_1825_days = change_percent_1825_days

    @property
    def change_percent_year_to_date(self):
        """Gets the change_percent_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price since the start of the calendar year to now.  # noqa: E501

        :return: The change_percent_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._change_percent_year_to_date
        
    @property
    def change_percent_year_to_date_dict(self):
        """Gets the change_percent_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501

        The percent change from the adjusted price since the start of the calendar year to now. as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The change_percent_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.change_percent_year_to_date
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'change_percent_year_to_date': value }

        
        return result
        

    @change_percent_year_to_date.setter
    def change_percent_year_to_date(self, change_percent_year_to_date):
        """Sets the change_percent_year_to_date of this ApiResponseSecurityQuote.

        The percent change from the adjusted price since the start of the calendar year to now.  # noqa: E501

        :param change_percent_year_to_date: The change_percent_year_to_date of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._change_percent_year_to_date = change_percent_year_to_date

    @property
    def extended_hours_last(self):
        """Gets the extended_hours_last of this ApiResponseSecurityQuote.  # noqa: E501

        The price of the latest trade in pre and post market trading.  Might be null during normal trading  # noqa: E501

        :return: The extended_hours_last of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._extended_hours_last
        
    @property
    def extended_hours_last_dict(self):
        """Gets the extended_hours_last of this ApiResponseSecurityQuote.  # noqa: E501

        The price of the latest trade in pre and post market trading.  Might be null during normal trading as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The extended_hours_last of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.extended_hours_last
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'extended_hours_last': value }

        
        return result
        

    @extended_hours_last.setter
    def extended_hours_last(self, extended_hours_last):
        """Sets the extended_hours_last of this ApiResponseSecurityQuote.

        The price of the latest trade in pre and post market trading.  Might be null during normal trading  # noqa: E501

        :param extended_hours_last: The extended_hours_last of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._extended_hours_last = extended_hours_last

    @property
    def extended_hours_change(self):
        """Gets the extended_hours_change of this ApiResponseSecurityQuote.  # noqa: E501

        The difference in extended_hours_last price from most recent official close price  # noqa: E501

        :return: The extended_hours_change of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._extended_hours_change
        
    @property
    def extended_hours_change_dict(self):
        """Gets the extended_hours_change of this ApiResponseSecurityQuote.  # noqa: E501

        The difference in extended_hours_last price from most recent official close price as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The extended_hours_change of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.extended_hours_change
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'extended_hours_change': value }

        
        return result
        

    @extended_hours_change.setter
    def extended_hours_change(self, extended_hours_change):
        """Sets the extended_hours_change of this ApiResponseSecurityQuote.

        The difference in extended_hours_last price from most recent official close price  # noqa: E501

        :param extended_hours_change: The extended_hours_change of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._extended_hours_change = extended_hours_change

    @property
    def extended_hours_change_percent(self):
        """Gets the extended_hours_change_percent of this ApiResponseSecurityQuote.  # noqa: E501

        The percent difference in extended_hours_last from the most recent official close price  # noqa: E501

        :return: The extended_hours_change_percent of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """
        return self._extended_hours_change_percent
        
    @property
    def extended_hours_change_percent_dict(self):
        """Gets the extended_hours_change_percent of this ApiResponseSecurityQuote.  # noqa: E501

        The percent difference in extended_hours_last from the most recent official close price as a dictionary. Useful for Panda Dataframes.  # noqa: E501

        :return: The extended_hours_change_percent of this ApiResponseSecurityQuote.  # noqa: E501
        :rtype: float
        """

        result = None

        value = self.extended_hours_change_percent
        if isinstance(value, list):
            result = list(map(
                lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                value
            ))
        elif hasattr(value, "to_dict"):
            result = value.to_dict()
        elif isinstance(value, dict):
            result = dict(map(
                lambda item: (item[0], item[1].to_dict())
                if hasattr(item[1], "to_dict") else item,
                value.items()
            ))
        else:
            result = { 'extended_hours_change_percent': value }

        
        return result
        

    @extended_hours_change_percent.setter
    def extended_hours_change_percent(self, extended_hours_change_percent):
        """Sets the extended_hours_change_percent of this ApiResponseSecurityQuote.

        The percent difference in extended_hours_last from the most recent official close price  # noqa: E501

        :param extended_hours_change_percent: The extended_hours_change_percent of this ApiResponseSecurityQuote.  # noqa: E501
        :type: float
        """

        self._extended_hours_change_percent = extended_hours_change_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponseSecurityQuote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
